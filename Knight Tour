#DSAOne 

public void solution(){
    if(solve(0,0,1)){
      printSolution(
    }
}
public boolean solve(int x, int y, int move){
int[][] set= int[8][8];
int xMove[] = { 2, 1, -1, -2, -2, -1, 1, 2 };
int yMove[] = { 1, 2, 2, 1, -1, -2, -2, -1 };
for(int i=0;i<8;i++){
  for(int j=0;j<8;j++){
      set[i][j]=-1;
    }
  }
 set[0][0] = 0;
 
    if(solverecursive(x,y,move,xMove.yMove,set)){
      printSolution(set);
      return true;
    }
  
  
  return false;
}


public boolean solverecursive(int x,int y,int move,int[] xMove, int[] yMove,int[][] set){
  int k, next_x, next_y;
        if (xMove == N * N)
            return true;
            
   for(int i=0;i<8;i++){
    next_x+=xMove[i];
    next_y+=yMove[i];
      if(safeMove(next_x,next_y,set)){
        set[next_x][next_y] = move;
          if(solverecursive(next_x,next_y,move+1,xMove,yMove,set){
            return true;
          }
          else
            set[next_x][next_y]==-1;
        }
    }
    return false;
            
 
}

Complexity - since for all n^2 elements , there are possible 8 moves thus O(8^(n^2))
Space complecity - O(n^2)
This is not the best solution to knight tour problem

